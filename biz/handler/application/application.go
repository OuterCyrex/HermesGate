// Code generated by hertz generator.

package application

import (
	applicationDAO "GoGateway/dao/application"
	"GoGateway/pkg/status"
	applicationSVC "GoGateway/svc/application"
	"context"
	"errors"
	"gorm.io/gorm"
	"net/http"

	application "GoGateway/biz/model/application"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// ApplicationAddHTTP .
// @router /application/add/http [POST]
func ApplicationAddHTTP(ctx context.Context, c *app.RequestContext) {
	var err error
	var req application.AppAddHttpRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, status.NewErrorResponse(err.Error()))
		return
	}

	svc := applicationSVC.ApplicationSvcLayer{}
	if err := svc.NewApp(req); err != nil {
		status.ErrToHttpResponse(c, err)
		return
	}

	resp := new(application.MessageResponse)

	resp.Message = "新建应用成功"

	c.JSON(consts.StatusOK, resp)
}

// ApplicationDetail .
// @router /application/detail/:id [GET]
func ApplicationDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req application.AppDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	repo := applicationDAO.ApplicationRepository{}
	resp, err := repo.Find(&applicationDAO.Application{Model: gorm.Model{ID: uint(req.ID)}})

	if errors.Is(err, gorm.ErrRecordNotFound) {
		c.JSON(http.StatusNotFound, status.NewErrorResponse("应用信息不存在"))
	} else if err != nil {
		status.ErrToHttpResponse(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp.ToHttpResponse())
}
