// Code generated by hertz generator.

package admin

import (
	admin "GoGateway/biz/model/admin"
	adminDAO "GoGateway/dao/admin"
	"GoGateway/pkg/consts/session"
	"GoGateway/pkg/status"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/sessions"
	"net/http"
	"time"
)

// AdminLogin .
// @router /admin/login [POST]
func AdminLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.AdminLoginRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, status.NewErrorResponse(err.Error()))
		return
	}

	adminHandler := adminDAO.NewAdminHandler()

	user, err := adminHandler.LoginAndCheck(&adminDAO.Admin{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		status.ErrToHttpResponse(c, err)
		return
	}

	adminSessionInfo := adminDAO.AdminSessionInfo{
		ID:        user.ID,
		Username:  user.Username,
		LoginTime: time.Now().Unix(),
	}

	ses := sessions.Default(c)
	ses.Set(sessionKey.AdminSessionInfoKey, adminSessionInfo.String())
	err = ses.Save()

	if err != nil {
		hlog.Errorf("save session error, %v", err.Error())
		status.ErrToHttpResponse(c, err)
		return
	}

	resp := admin.AdminLoginResponse{
		Token: user.Username,
		Code:  http.StatusOK,
		Msg:   "登陆成功",
	}

	c.JSON(http.StatusOK, resp)
}

// AdminInfo .
// @router /admin/info [GET]
func AdminInfo(ctx context.Context, c *app.RequestContext) {

	r, ok := c.Get(sessionKey.AdminSessionInfoKey)
	if !ok {
		c.JSON(http.StatusForbidden, "请先登陆")
		return
	}

	userInfo := r.(adminDAO.AdminSessionInfo)

	resp := admin.AdminInfoResponse{
		ID:           int32(userInfo.ID),
		Username:     userInfo.Username,
		LoginTime:    userInfo.LoginTime,
		Avatar:       "https://img1.baidu.com/it/u=1793587130,665021138&fm=253&fmt=auto&app=138&f=JPEG?w=381&h=380",
		Introduction: "我是超级管理员",
		Roles:        []string{"admin"},
	}

	c.JSON(http.StatusOK, resp)
}

// AdminLogout .
// @router /admin/logout [GET]
func AdminLogout(ctx context.Context, c *app.RequestContext) {
	sess := sessions.Default(c)
	sess.Delete(sessionKey.AdminSessionInfoKey)
	err := sess.Save()
	if err != nil {
		hlog.Errorf("save session error, %v", err.Error())
		status.ErrToHttpResponse(c, err)
		return
	}

	resp := admin.MessageResponse{Message: "退出登陆成功"}

	c.JSON(consts.StatusOK, resp)
}

// ChangePassword .
// @router /admin/pwd [POST]
func ChangePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req admin.ChangePasswordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, status.NewErrorResponse(err.Error()))
		return
	}

	r, ok := c.Get(sessionKey.AdminSessionInfoKey)
	if !ok {
		c.JSON(http.StatusForbidden, "请先登陆")
		return
	}
	userInfo := r.(adminDAO.AdminSessionInfo)

	handler := adminDAO.AdminHandler{}

	err = handler.UpdatePassword(userInfo.ID, req.Password)
	if err != nil {
		status.ErrToHttpResponse(c, err)
		return
	}

	resp := admin.MessageResponse{
		Message: "更新成功",
	}

	sess := sessions.Default(c)
	sess.Delete(sessionKey.AdminSessionInfoKey)
	err = sess.Save()
	if err != nil {
		hlog.Errorf("save session error, %v", err.Error())
		status.ErrToHttpResponse(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
